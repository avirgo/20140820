headers
headers={"Authorization": "Basic {0}".format(str(z.basicauth)), "Accept": "application/*+xml;version=5.1", "Host": z.server}
conn
conn.timeout=30
r0=conn.request("POST","/api/sessions",headers=headers)
conn = httplib.HTTPSConnection(z.server)
r0=conn.request("POST","/api/sessions",headers=headers)
conn.strict
conn.strict=1
conn.debug
conn.debuglevel
conn.debuglevel=3
r0=conn.request("POST","/api/sessions",headers=headers)
conn = httplib.HTTPSConnection(z.server)
conn.strict=1
conn.debuglevel=3
r0=conn.request("POST","/api/sessions",headers=headers)
dir(conn)
conn.sock
conn.connect
dir(conn.connect)
dir(conn.connect())
dir(conn.sock)
dir(conn.sock.str)
conn.sock.__str__
conn = httplib.HTTPSConnection(z.server,context=None)
import socket
import ssl
import httplib
class HTTPSClientAuthConnection(httplib.HTTPSConnection):
    """ Class to make a HTTPS connection, with support for full client-based SSL Authentication"""
    def __init__(self, host, port, key_file, cert_file, ca_file, timeout=None):
        httplib.HTTPSConnection.__init__(self, host, key_file=key_file, cert_file=cert_file)
        self.key_file = key_file
        self.cert_file = cert_file
        self.ca_file = ca_file
        self.timeout = timeout
    def connect(self):
        """ Connect to a host on a given (SSL) port.
            If ca_file is pointing somewhere, use it to check Server Certificate.
            Redefined/copied and extended from httplib.py:1105 (Python 2.6.x).
            This is needed to pass cert_reqs=ssl.CERT_REQUIRED as parameter to ssl.wrap_socket(),
            which forces SSL to check server certificate against our client certificate.
        """
        sock = socket.create_connection((self.host, self.port), self.timeout)
        if self._tunnel_host:
            self.sock = sock
            self._tunnel()
        # If there's no CA File, don't force Server Certificate Check
        if self.ca_file:
            self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ca_certs=self.ca_file, cert_reqs=ssl.CERT_REQUIRED)
        else:
            self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, cert_reqs=ssl.CERT_NONE)
import readline
readline.history
dir(readline)
readline.write_history_file('hist201410091011.txt')
